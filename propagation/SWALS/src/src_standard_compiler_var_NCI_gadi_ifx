# Define variables we typically need for compilation
#
# This is included in the user make script -- and in unusual cases, variables
# can be overwritten by redefining them.
#

# Preprocessor options passed to compiler
SWALS_PREPROCESSOR_FLAGS ?=

# Flag to run in parallel using a default setup.
# If defined then this will compile a distributed memory version of the code,
# with default compiler options below.
# To use other options, do not set this variable, but instead manually define
# SWALS_FC, SWALS_PREPROCESSOR_FLAGS 
SWALS_BUILD_WITH_PARALLEL_DEFAULTS ?=

# Flag to turn off link time optimization
NO_LTO ?= -no-ipo


#
# C compiler and gdal libraries
#
SWALS_CC ?= gcc -O3
# NCI staff suggested that on Gadi, it's better to link with -lgdal (not via gdal-config)
SWALS_GDAL_LIBS ?= -lgdal
#SWALS_GDAL_LIBS ?= `gdal-config --libs`
SWALS_GDAL_CFLAGS ?= `gdal-config --cflags`

#
# NVCC and associated flags
# 

## First check that we have nvcc. If not avoid using it
##CUDA_C_TEST := `command -v nvcc`
# Never use CUDA
SWALS_CUDA_C_TEST :=
ifeq ($(SWALS_CUDA_C_TEST),)
    # Not using cuda
    SWALS_CUDA_CC_ACTIVE :=
    SWALS_CUDA_CC :=
    SWALS_CUDA_CC_INCLUDE :=
    SWALS_CUDA_CC_LIBS :=
else
    # Append GPU specific preprocesser var
    SWALS_PREPROCESSOR_FLAGS := $(SWALS_PREPROCESSOR_FLAGS) -DUSE_GPU
    SWALS_CUDA_CC_ACTIVE := true

    SWALS_CUDA_CC ?= nvcc -c -O3 --default-stream per-thread
    # Make sure preprocessor flags go to cuda compiler
    SWALS_CUDA_CC := $(SWALS_CUDA_CC) $(SWALS_PREPROCESSOR_FLAGS)
    SWALS_CUDA_CC_INCLUDE ?= -I/usr/include/ -I.
    SWALS_CUDA_CC_LIBS ?= -L/usr/lib/cuda/lib64 -L/usr/lib/cuda/nvvm -lcuda -lcudart 
endif

#
# NETCDF
# 

ifeq ($(findstring DNONETCDF, $(SWALS_PREPROCESSOR_FLAGS)), DNONETCDF)
    # Not using netcdf if -DNONETCDF is a preprocessor flag
    SWALS_NETCDF_FINCLUDE := 
    SWALS_NETCDF_FLIBS := 
else
    # The netcdf fortran include/lib paths might be in either nc-config, or nf-config.
    # Here we test for that and adapt accordingly
    SWALS_NC_TEST := $(nc-config --fflags)
    SWALS_NETCDF_FINCLUDE ?= `nc-config --fflags`
    # NCI staff indicated that on Gadi, it's better to just link with -lnetdcdf and/or -lnetcdff
    SWALS_NETCDF_FLIBS ?= -lnetcdf -lnetcdff
    #SWALS_NETCDF_FLIBS ?= `nc-config --flibs`
    ifeq ($(SWALS_NC_TEST),)
        SWALS_NETCDF_FINCLUDE ?= `nf-config --fflags`
        SWALS_NETCDF_FLIBS ?= -lnetcdf -lnetcdff
        #SWALS_NETCDF_FLIBS ?= `nf-config --flibs`
    endif

endif

#
# Fortran compiler
#
ifeq ($(findstring true, $(SWALS_BUILD_WITH_PARALLEL_DEFAULTS)), true)
    # Parallel compiler defaults. 
    SWALS_FC ?= mpif90
    SWALS_PREPROCESSOR_FLAGS := $(SWALS_PREPROCESSOR_FLAGS) -DTIMER -DCOARRAY -DCOARRAY_PROVIDE_CO_ROUTINES -DCOARRAY_USE_MPI_FOR_INTENSIVE_COMMS
else
    SWALS_FC ?= ifx
endif

# If -DNOOPENMP was passed to the preprocessor, we should not link with openmp.
ifeq ($(findstring DNOOPENMP, $(SWALS_PREPROCESSOR_FLAGS)),)
    # Case with openmp
    # Quiet ifort warnings like this (which are compiler
    # issues, not Fortran standard issues, and have apparently never been
    # observed to create problems in the wild:
    # https://community.intel.com/t5/Intel-Fortran-Compiler/warning-5462-Global-name-too-long-shortened-from-side-effects/m-p/1069914
    # warning #5462: Global name too long, shortened from:
    # domain_modone_leapfrog_truely_linear_plus_nonlinear_friction_step_mp_PRECOMPUTE_FRICTION_WORK
    # to:
    # main_modone_leapfrog_truely_linear_plus_nonlinear_friction_step_mp_PRECOMPUTE_FRICTION_WORK
    SWALS_FC_FLAGS ?= -O3 -qopenmp -fpp -fPIC -ipo -diag-disable=5462 -g
else
    # Case without openmp
    SWALS_FC_FLAGS ?= -O3 -fpp -fPIC -ipo -diag-disable=5462 -g
endif

# Make it easier to append flags for hardware-specific optimization, such as
# -xHost or -xSKYLAKE . Better not to have these by default, because
# they can be sub-optimal in some situations (e.g. when compiling on one
# machine and running on another)
SWALS_FC_ARCH_FLAGS ?= -xCASCADELAKE
SWALS_FC_FLAGS := $(SWALS_FC_FLAGS) $(SWALS_FC_ARCH_FLAGS)


SWALS_FC_INCLUDE ?=
SWALS_FC_INCLUDE := $(SWALS_FC_INCLUDE) $(SWALS_CUDA_CC_INCLUDE) $(SWALS_NETCDF_FINCLUDE)
# Fortran linking commands
SWALS_LAPACK_LIBS ?= -llapack
SWALS_FC_LIBS ?=
# Add in other libraries required above
SWALS_FC_LIBS := $(SWALS_FC_LIBS) $(SWALS_NETCDF_FLIBS) $(SWALS_GDAL_LIBS) $(SWALS_CUDA_CC_LIBS) $(SWALS_LAPACK_LIBS)
# This is the full compiler call
SWALS_FORTRAN := $(SWALS_FC) $(SWALS_FC_FLAGS) $(SWALS_PREPROCESSOR_FLAGS) $(SWALS_FC_INCLUDE)

# Use this to make the $(SWALS_LIBRARY)
SWALS_LIBRARY ?= libSWE.a
SWALS_AR ?= xiar rcs
# Avoid errors when bundling as a library (not that we use the resulting library)
#SWALS_AR :=/apps/intel-oneapi/compiler/2023.2.0/linux/bin-llvm/llvm-ar rcs
#SWALS_AR :=llvm-ar rcs
#

