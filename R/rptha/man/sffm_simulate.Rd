% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sffm_fit_simulate_earthquake.R
\name{sffm_simulate}
\alias{sffm_simulate}
\title{Synthetic finite fault model generator}
\usage{
sffm_simulate(
  reg_par,
  tg_mat,
  sffm_pars = .sffm_default_model_parameters,
  sub_sample_size = c(1, 1)
)
}
\arguments{
\item{reg_par}{vector passed to sffm_pars$spectral_amplitude_fun. First
two entries are kcxN, kcyN, as explained above and in the example}

\item{tg_mat}{is a 'template' raster, or matrix. The output slip distribution
will have these dimensions, and if tg_mat is a RasterLayer, it will have the
same properties (e.g. pixel size, spatial projection).}

\item{sffm_pars}{list containing sffm configuration parameters. See
sffm_get_default_model_parameters()}

\item{sub_sample_size}{vector of length 2 with integers >= 1. tg_mat is 
refined to have rows/columns = sub_sample_size * (original rows/columns) before
the algorithm is applied. Values > 1 cause tg_mat to be sampled to finer
resolution before we simulate the sffm. The synthetic values are re-aggregated
into a matrix with the size of the original tg_mat prior to returning}
}
\value{
Output is the same class as tg_mat
}
\description{
Make a random slip surface with the same dimensions as a provided template
RasterLayer or matrix. The random slip surface is generated using (by default)
the S_{NCF} algorithm in Davies et al., (2015), based on user-provided 
numerical corner wave-number parameters. The corner-wavenumber parameters
are specified in numerical space as (kcxN, kcyN) = (kcx, kcy) * (dx, dy) 
where kcxN, kcyN are the NUMERICAL corner wave numbers; (kcx, kcy) are the
physical corner wavenumbers (units of 1/distance), and (dx, dy) are the x/y
pixel spacing of the template raster or matrix. \cr
Further explanation, see the example: \cr
}
\examples{

#
# Example simulating an SFFM
#

tg_mat = matrix(0, nrow=8, ncol=12)
tg_mat[3,5] = 1 # Fix peak slip location
xs = seq(0, 120, len=ncol(tg_mat)) # x-coordinates of tg_mat
ys = seq(0, 50, len=nrow(tg_mat)) # y-coordinates of tg_mat
dx = xs[2] - xs[1]
dy = ys[2] - ys[1]
# Make numerical corner wavenumbers c(kcxN, kcyN), corresponding to physical
# corner wavenumbers (1/50, 1/20) in the (x,y) directions respectively
reg_par = c(1/50 * dx, 1/20 * dy) 
random_slip_mat = sffm_simulate(reg_par, tg_mat)

## Example plot
filled.contour(xs, ys, t(random_slip_mat), asp=1, nlevels=30, 
    color.palette=rainbow)

# Clipping should lead to patches of zero slip
stopifnot(min(random_slip_mat) == 0)

#
# Example changing default parameters
#

new_sffm_parameters = sffm_get_default_model_parameters()
# Use absolute-value transformation to remove negative values, instead of clipping
new_sffm_parameters$negative_slip_removal_function <-function(x) abs(x)
# ... other changes could be made too ... #
random_slip_matB = sffm_simulate(reg_par, tg_mat, sffm_pars = new_sffm_parameters)

## Example plot
filled.contour(xs, ys, t(random_slip_matB), asp=1, nlevels=30, 
    color.palette=rainbow)

# Should no longer be patches of zero values
stopifnot(min(random_slip_matB) > 0)

}
\references{
Davies et al. (2015), 
Tsunami inundation from heterogeneous earthquake slip distributions:
Evaluation of synthetic source models, J. Geophys. Res. Solid Earth, 120,
6431-6451, doi:10.1002/2015JB012272. \cr
}
