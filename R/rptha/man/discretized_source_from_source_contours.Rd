% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unit_sources.R
\name{discretized_source_from_source_contours}
\alias{discretized_source_from_source_contours}
\title{Make discretized_source from subduction interface contours}
\usage{
discretized_source_from_source_contours(
  source_shapefile,
  desired_subfault_length,
  desired_subfault_width,
  make_plot = FALSE,
  contour_depth_attribute = "level",
  contour_depth_in_km = TRUE,
  extend_line_fraction = 1e-06,
  orthogonal_near_trench = FALSE,
  improved_downdip_lines = TRUE,
  downdip_lines = NULL
)
}
\arguments{
\item{source_shapefile}{character filename of the line shapefile defining the
subduction interface contours. It should have an attribute giving the depth.
Alternatively, source_shapefile can be a \code{SpatialLinesDataFrame} obtained
by reading the file with \code{readOGR}.}

\item{desired_subfault_length}{numeric desired length of subfaults (km)}

\item{desired_subfault_width}{numeric desired width of subfaults (km)}

\item{make_plot}{logical Make a plot?}

\item{contour_depth_attribute}{character The name of the column in the
source_shapefile attribute table giving the contour depth}

\item{contour_depth_in_km}{logical Are contour depths given in km? (If False,
assume 'm')}

\item{extend_line_fraction}{To ensure that contour lines intersect downdip
lines at the left/right edges we extend (or buffer) them by this fraction of the
end-to-end source length. Not required if 'improved_downdip_lines=TRUE'}

\item{orthogonal_near_trench}{move unit source points along the trench to enhance
orthogonality there. Can reduce numerical artefacts at the trench. 
Not used if 'improved_downdip_lines=TRUE' or if downdip_lines is provided (we
encourage the latter approaches)}

\item{improved_downdip_lines}{If TRUE, use an iterative algorithm for
computing the downdip lines (which define unit source boundaries). This
should lead to unit-sources that are more orthogonal, which is normally a 'good thing'. 
The iterative algorithm can take a few minutes if there are hundreds of unit-sources in
each along-trench direction. In general we do not suggest setting this to
FALSE (except for compatibility with early versions of the code).}

\item{downdip_lines}{Either NULL, or the name of a Line Shapefile, or a 
SpatialLinesDataFrame derived by reading the latter. It should contain lines
which cross the source contours in a down-dip direction, with a single attribute 
giving the line order in the along strike direction. If not NULL, then these
lines define the along-strike boundaries of the unit-sources. If NULL and 
'improved_downdip_lines=TRUE', then the code uses
\code{create_downdip_lines_on_source_contours_improved} to auto-generate downdip
lines. The latter routine can be called separately to make downdip
lines, which can be manually edited before passing to this function.}
}
\value{
A list containing: depth_contours The original source contours;
unit_source_grid A 3 dimensional array descrbing the unit source vertices;
discretized_source_dim A vector of length 2 with number-of-sources-down-dip,
number-of-sources-along-strike; fine_downdip_transects A 3 dimensional array
containing densly spaced points along the down-dip transects, which might be
useful for defining sub-unit-source points for tsunami source integration
}
\description{
Given a shapefile with contour lines in lon/lat coordinates defining the
source-zone subduction interface depth, partition the source-zone into
unit sources with chosen approximate length/width. Information on all the
unit sources is held in a 'discretized_source' list. \cr 
Optionally, the user can provide a line shapefile defining the along-strike
boundaries of the unit sources. Otherwise, they are automatically created.
In any case care may be required to ensure good quality unit-source
boundaries are created. A good strategy is to make them automatically as
a first iteration, then save the corresponding down-dip lines as a line shapefile.
This can be achieved by passing the mid_lines_with_cutpoints output of the
current routine to  \code{downdip_lines_to_SpatialLinesDataFrame}. Then you
may optionally edit the latter shapefile in GIS, and subsequently pass it
to this routine directly.
}
\examples{
# Get source contours
puysegur = readOGR(system.file('extdata/puysegur.shp', package='rptha'), layer='puysegur')
# Get downdip lines
puysegur_downdip = readOGR(system.file('extdata/puysegur_downdip.shp', package='rptha'), 
   layer='puysegur_downdip')
# Make discretized_source with 50km x 50km unit-sources (approximately)
puysegur_discretized_source = discretized_source_from_source_contours(
    source_shapefile=puysegur,
   desired_subfault_length=50,
   desired_subfault_width=50,
   downdip_lines=puysegur_downdip,
   make_plot=TRUE)

}
