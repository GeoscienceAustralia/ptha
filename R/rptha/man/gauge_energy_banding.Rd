% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gauge_statistics.R
\name{gauge_energy_banding}
\alias{gauge_energy_banding}
\title{Spectral energy in frequency bands of gauge time-series}
\usage{
gauge_energy_banding(
  data_t,
  data_s,
  bin_divisors,
  interp_dt = NULL,
  exclude_mean = TRUE
)
}
\arguments{
\item{data_t}{vector of numeric times at which stages are recorded (usually in seconds)}

\item{data_s}{vector of numeric stages corresponding to data_t (usually in metres)}

\item{bin_divisors}{compute the spectral energy in bands which are separated
by these divisors. They should be ordered highest-to-lowest.}

\item{interp_dt}{numeric time-step (same units as data_t). We interpolate
the data to a fixed time-step given by interp_dt, before performing the
discrete fourier transform. If NULL, the minimum spacing in data_t is used.}

\item{exclude_mean}{logical -- do not include the mean of data_s in any energy band}
}
\value{
vector of length = length(bin_divisors)+1 giving the spectral energy
in a range of frequency bands. The first entry corresponds to the highest
frequency bin, containing frequencies ranging from (Infty, bin_divisors[1]).
The next value includes frequencies from (bin_divisors[1], bin_divisors[2]).
The last includes frequencies from (bin_divisors[n], eps), where n is the
length of bin_divisors, and eps is a number slightly larger than zero (which
ensures the mean is not included in the lowest bin).
}
\description{
Get the spectral energy associated with different frequency bands in a wave
time-series. Suppose data_s is a vector of stages recorded at an even time
interval interp_dt. From the properties of the fourier transform, the
following two quantities are equal: \cr
\code{signal_energy = sum(data_s^2)*interp_dt} \cr
\code{spectral_energy = sum(Mod(fft(data_s))**2)/length(data_s) * interp_dt} \cr
The current code splits the 'spectral_energy' quantity above into a number of bins
containing different frequencies. The divisions between the bins are defined
by \code{bin_divisors}. By default the mean of data_s is excluded.
}
\examples{
dt = 0.5
t = seq(0, 2000*2*pi, by=dt)
# Make some frequencies to add together
s1 = 0.3*sin(2*pi*t/5) # Frequency of 1/5
s2 = 1.2*sin(2*pi*t/30) # Frequency of 1/30
s3 = 2.0*sin(2*pi*t/100) # Frequency of 1/100
stage = s1 + s2 + s3 

# gauge_energy_banding can be used to pick out the energy in s1, s2, s3, with 
# a suitable choice of the bin divisors.
energy_bands = gauge_energy_banding(t, stage, bin_divisors=c(1/10, 1/50))

# Excluding the mean, all the energy should be accounted for
stopifnot( abs(sum(energy_bands) - sum((stage-mean(stage))^2)*dt) < 1.0e-04)

# Each bin should have almost the same energy as the corresponding component,
# with some error caused by spectral leakage in the dft
stopifnot( abs( energy_bands[1] - sum(s1^2)*dt) < 0.01*energy_bands[1])
stopifnot( abs( energy_bands[2] - sum(s2^2)*dt) < 0.01*energy_bands[2])
stopifnot( abs( energy_bands[3] - sum(s3^2)*dt) < 0.01*energy_bands[3])

}
