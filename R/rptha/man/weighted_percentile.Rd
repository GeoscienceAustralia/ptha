% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_stage_vs_rate_curve_fast.R
\name{weighted_percentile}
\alias{weighted_percentile}
\title{Get a percentile from an empirical distribution}
\usage{
weighted_percentile(vals, weights, p, method = "orig")
}
\arguments{
\item{vals}{vector of values}

\item{weights}{vector of non-negative weights (one for each value). These will be
normalised to weights/sum(weights) inside the function}

\item{p}{vector, with length 1 or more, containing values for 'p' as defined
above. We require 0<=p<=1}

\item{method}{either 'orig' or 'findinterval_search'. The latter can be
faster with many elements in p. The tests below suggest both methods give
the same results, in future it might be sensible to change the default.}
}
\value{
A vector 'X' with the same length as 'p', as defined above
}
\description{
Suppose a distribution is defined empirically by a set of values (vals), each
having a weight 'weight' which defines the probability mass function of each vals.
This function returns the smallest value of X in 'vals' such that PR(vals <= X) >= p.
}
\examples{
   vals = c(-10, 5, 3, -4, 5, 6)
   weights = c(0.5, 0.1, 0.1, 0.1, 0.1, 0.1)

   test_p = c(0.0, 0.5, 0.501, 0.6, 0.601, 0.7, 0.701, 0.8, 0.9, 0.901, 1.0)
   empirical_q = weighted_percentile(vals, weights, test_p)

   expected_vals = c(-10, -10, -4, -4, 3, 3, 5, 5, 5, 6, 6)
   stopifnot(all(empirical_q == expected_vals))


   # Check for differences in the 2 methods
   t1 = weighted_percentile(c(1, 2, 3), weights=c(0.5, 0, 0.5), p=c(0, 0.001, 0.5, 0.999, 1), method='orig')
   t2 = weighted_percentile(c(1, 2, 3), weights=c(0.5, 0, 0.5), p=c(0, 0.001, 0.5, 0.999, 1), method='findinterval_search')
   stopifnot(all(t1 == t2))

   # Check for differences in the 2 methods
   Nrepeat = 100
   N = 1000
   for(i in 1:Nrepeat){
       p = runif(N)
       zvals = sample(seq(1, 50), size=N, replace=TRUE) 
       weights = runif(N)
       # Zero some weights
       weights[sample(seq(1,N), size=50)] = 0
       t0 = weighted_percentile(zvals, weights, p, method='orig')
       t1 = weighted_percentile(zvals, weights, p, method='findinterval_search')
       stopifnot(all(t0 == t1))
   }

   # Check for differences in the 2 methods -- alternative random 'p' and 'weights'
   Nrepeat = 100
   N = 1000
   for(i in 1:Nrepeat){
       p = sample(seq(0, 1, len=101), size=N, replace=TRUE)
       zvals = sample(seq(1, 50), size=N, replace=TRUE) 
       weights = sample(seq(0, 1, len=101), size=N, replace=TRUE)
       # Zero some weights
       weights[sample(seq(1,N), size=50)] = 0
       t0 = weighted_percentile(zvals, weights, p, method='orig')
       t1 = weighted_percentile(zvals, weights, p, method='findinterval_search')
       stopifnot(all(t0 == t1))
   }


}
